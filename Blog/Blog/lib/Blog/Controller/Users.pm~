package Blog::Controller::Users;
use Moose;
use namespace::autoclean;

BEGIN { extends 'Catalyst::Controller'; }

=head2 list
Fetch all users and pass to the view in
stash to be displayed
=cut
sub list :Local {
my ($self, $c) = @_;
$c->stash(users => [$c->model('DB::User')->all]);
$c->stash(template => 'users/list.tt');
}

=head2 base
 
Can place common logic to start chained dispatch here
 
=cut
 
sub base :Chained('/') :PathPart('users') :CaptureArgs(0) {
    my ($self, $c) = @_;
    # Store the ResultSet in stash so it's available for other methods
    $c->stash(resultset => $c->model('DB::user'));
    # Print a message to the debug log
    $c->log->debug('*** INSIDE BASE METHOD ***');
}

=head2 form_create
 
Display form to collect information for book to create
 
=cut
 
sub form_create :Chained('base') :PathPart('form_create') :Args(0) {
    my ($self, $c) = @_;
    # Set the TT template to use
    $c->stash(template => 'users/form_create.tt');
}

=head2 form_create_do
 
Take information from form and add to database
 
=cut
 
sub form_create_do :Chained('base') :PathPart('form_create_do') :Args(0) {
    my ($self, $c) = @_;

    my $username     = $c->request->params->{username}     || 'N/A';
    my $password    = $c->request->params->{password}    || 'N/A';
    my $email = $c->request->params->{email} || '1';

    my $user = $c->model('DB::user')->create({
            username   => $username,
            password  => $password,
            email => $email,
        });
    $c->stash(user     => $user);
     $c->forward('list');
}

sub object :Chained('base') :PathPart('id') :CaptureArgs(1) {
    my ($self, $c, $id) = @_;
    $c->stash(object => $c->stash->{resultset}->find($id));
    die "user $id not found!" if !$c->stash->{object};
    $c->log->debug("*** INSIDE OBJECT METHOD for obj id=$id ***");
}


sub delete :Chained('object') :PathPart('delete') :Args(0) {
    my ($self, $c) = @_;
    $c->stash->{object}->delete;
    $c->stash->{status_msg} = "user deleted.";
    $c->forward('list');
}


=head1 NAME

Blog::Controller::Users - Catalyst Controller

=head1 DESCRIPTION

Catalyst Controller.

=head1 METHODS

=cut


=head2 index

=cut

sub index :Path :Args(0) {
    my ( $self, $c ) = @_;

    $c->response->body('Matched Blog::Controller::Users in Users.');
}



=encoding utf8

=head1 AUTHOR

nahla,,,

=head1 LICENSE

This library is free software. You can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

__PACKAGE__->meta->make_immutable;

1;
